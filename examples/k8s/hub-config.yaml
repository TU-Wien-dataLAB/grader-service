# hub relates to the hub pod, responsible for running JupyterHub, its configured
# Authenticator class KubeSpawner, and its configured Proxy class
# ConfigurableHTTPProxy. KubeSpawner creates the user pods, and
# ConfigurableHTTPProxy speaks with the actual ConfigurableHTTPProxy server in
# the proxy pod.
hub:
  # baseUrl: /jupyter # added to Ingress path
  config:
    JupyterHub:
      admin_access: true
      authenticator_class: dummy
  db:
    type: sqlite-memory
  allowNamedServers: true
  namedServerLimitPerUser: 2
  serviceAccount:
    create: true
  extraConfig:
    default: |
      c.Authenticator.allowed_users = {'admin', 'instructor', 'tutor', 'student'}
      c.Authenticator.admin_users = {'admin'}
      c.JupyterHub.tornado_settings = { 'headers': {'Content-Security-Policy': "frame-ancestors localhost 127.0.0.1 'self'"} }
      
      ## authenticator
      from oauthenticator.generic import GenericOAuthenticator
      
      c.JupyterHub.authenticator_class = GenericOAuthenticator
      c.GenericOAuthenticator.oauth_callback_url = "http://localhost/jupyter/hub/oauth_callback"
      
      c.GenericOAuthenticator.client_id = "my_id"
      c.GenericOAuthenticator.client_secret = "my_secret"
      c.GenericOAuthenticator.authorize_url = "http://localhost/jupyter/services/grader/api/oauth2/authorize"
      c.GenericOAuthenticator.token_url = "http://grader-service:4010/services/grader/api/oauth2/token" # NOTE: request from hub does not go to proxy (need grader-service:4010)
      
      c.GenericOAuthenticator.userdata_url = "http://grader-service:4010/services/grader/api/user" # NOTE: request from hub does not go to proxy (need grader-service:4010)
      c.GenericOAuthenticator.username_claim = "name"
      
      c.Authenticator.enable_auth_state = True
      
      # PASS GRADER TOKEN TO SPAWNER
      def auth_state_hook(spawner, auth_state):
          token = auth_state["access_token"]
      
          # The environment variable GRADER_API_TOKEN is used by the lab-extension
          # to identify the user in API calls to the Grader Service.
          spawner.environment.update({"GRADER_API_TOKEN": token})
      
      # We have access to the authentication data, which we can use to set
      # `userdata` in the spawner of the user.
      c.Spawner.auth_state_hook = auth_state_hook
      
      c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
      c.KubeSpawner.debug = True
      
      c.JupyterHub.services.append({
          'name': 'grader',
          'url': 'http://grader-service:4010',
          'api_token': '7572f93a2e7640999427d9289c8318c0'
      })

rbac:
  create: true

# proxy relates to the proxy pod, the proxy-public service, and the autohttps
# pod and proxy-http service.
proxy:
  service:
    type: ClusterIP
  # chp relates to the proxy pod, which is responsible for routing traffic based
  # on dynamic configuration sent from JupyterHub to CHP's REST API.

# singleuser relates to the configuration of KubeSpawner which runs in the hub
# pod, and its spawning of user pods such as jupyter-myusername.
singleuser:
  events: true
  storage:
    type: none
  defaultUrl: /lab
  image:
    name: ghcr.io/tu-wien-datalab/grader-labextension
    tag: "latest"
  extraEnv:
    GRADER_HOST_URL: http://grader-service:4010

# scheduling relates to the user-scheduler pods and user-placeholder pods.
scheduling:
  userScheduler:
    enabled: false
  userPlaceholder:
    enabled: false

# prePuller relates to the hook|continuous-image-puller DaemonsSets
prePuller:
  hook:
    enabled: false
  continuous:
    enabled: false

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - localhost

# cull relates to the jupyterhub-idle-culler service, responsible for evicting
# inactive singleuser pods.
#
# The configuration below, except for enabled, corresponds to command-line flags
# for jupyterhub-idle-culler as documented here:
# https://github.com/jupyterhub/jupyterhub-idle-culler#as-a-standalone-script
#
cull:
  enabled: true
  users: true # --cull-users
  adminUsers: true # --cull-admin-users
  removeNamedServers: true # --remove-named-servers
  timeout: 360 # --timeout
  every: 60 # --cull-every
  concurrency: 10 # --concurrency
  maxAge: 0 # --max-age

debug:
  enabled: true
