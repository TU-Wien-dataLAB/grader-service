# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Grader Labextension Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: Install build dependencies
      working-directory: ./grader_labextension
      run: |
        python -m pip install --upgrade pip
        pip install jupyter_packaging~=0.12.0 jupyterlab~=3.1 packaging setuptools twine build
    - name: Install dependencies
      working-directory: ./grader_labextension
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
        pip install -r ../grader_convert/requirements.txt
        pip install ../grader_convert  
        pip install -r requirements.txt
    - name: Verify installation
      working-directory: ./grader_labextension
      run: |
        python -m pip install .
        jupyter server extension list 2>&1 | grep -ie "grader_labextension.*OK"
        jupyter labextension list 2>&1 | grep -ie "grader-labextension.*OK"
    - name: Build package
      working-directory: ./grader_labextension
      run: python -m build -n
    - name: Publish the Python package
      working-directory: ./grader_labextension
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_SETUP_TOKEN }}
      # skip existing for possible npm release
      run: |
        twine upload --skip-existing dist/*
    - name: Publish the NPM package
      working-directory: ./grader_labextension
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_SETUP_TOKEN }}
        PRE_RELEASE: ${{ github.event.release.prerelease }}
      run: |
        echo $PRE_RELEASE
        if [[ $PRE_RELEASE == "true" ]]; then export TAG="next"; else export TAG="latest"; fi
        npm publish --tag ${TAG} --access public
